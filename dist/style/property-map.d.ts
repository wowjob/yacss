import type { TBorder, TBorderWidth, TDisplay, TFlex, TFlexDirection, TMargin, TPadding, TBorderStyle, TFlexBasis, TFlexGrow, TFlexShrink, TFlexWrap, TAnimation, TBackground, TBorderImage, TBorderBlockStart, TBorderBlockEnd, TBorderBlock, TBorderInlineStart, TBorderInlineEnd, TBorderInline, TBorderRadius, TBorderBottom, TBorderBottomLeftRadius, TBorderBottomRightRadius, TBorderCollapse, TBorderEndEndRadius, TBorderEndStartRadius, TBorderTop, TBorderTopLeftRadius, TBorderTopRightRadius, TBorderLeft, TBorderRight, TBorderStartEndRadius, TBorderStartStartRadius, TBlockSize, TAspectRatio, TAppearance, TAccentColor, TAlignContent, TAlignItems, TAlignSelf, TBackdropFilter, TBackfaceVisibility, TBackgroundBlendMode, TBackgroundClip, TBackgroundOrigin, TBoxShadow, TBoxSizing, TBreakAfter, TBreakBefore, TBreakInside, TCaptionSide, TCaretColor, TClear, TClip, TClipPath, TColor, TColorInterpolation, TColorInterpolationFilters, TColorScheme, TColumnCount, TColumnFill, TColumnGap, TColumnRule, TColumnSpan, TColumnWidth, TContain, TContainIntrinsicBlockSize, TContainIntrinsicHeight, TContainIntrinsicInlineSize, TContainIntrinsicSize, TContainIntrinsicWidth, TContainer, TContent, TContentVisibility, TCounterIncrement, TCounterReset, TCounterSet, TCursor, TCx, TCy, TD, TDirection, TDominantBaseline, TEmptyCells, TFieldSizing, TFill, TFillOpacity, TFillRule, TFilter, TFloat, TFloodColor, TFloodOpacity, TFont, TFontFeatureSettings, TFontKerning, TFontLanguageOverride, TFontOpticalSizing, TFontPalette } from '../type';
export type TEnv = 'dev' | 'prod';
export type TCSSPropValue = Partial<{
    accentColor: TAccentColor;
    alignContent: TAlignContent;
    alignItems: TAlignItems;
    alignSelf: TAlignSelf;
    animation: TAnimation;
    appearance: TAppearance;
    aspectRatio: TAspectRatio;
    backdropFilter: TBackdropFilter;
    backfaceVisibility: TBackfaceVisibility;
    background: TBackground;
    backgroundBlendMode: TBackgroundBlendMode;
    backgroundClip: TBackgroundClip;
    backgroundOrigin: TBackgroundOrigin;
    blockSize: TBlockSize;
    border: TBorder;
    borderBlock: TBorderBlock;
    borderBlockStart: TBorderBlockStart;
    borderBlockEnd: TBorderBlockEnd;
    borderBottom: TBorderBottom;
    borderBottomLeftRadius: TBorderBottomLeftRadius;
    borderBottomRightRadius: TBorderBottomRightRadius;
    borderCollapse: TBorderCollapse;
    borderEndEndRadius: TBorderEndEndRadius;
    borderEndStartRadius: TBorderEndStartRadius;
    borderImage: TBorderImage;
    borderInline: TBorderInline;
    borderInlineStart: TBorderInlineStart;
    borderInlineEnd: TBorderInlineEnd;
    borderLeft: TBorderLeft;
    borderRadius: TBorderRadius;
    borderRight: TBorderRight;
    borderWidth: TBorderWidth;
    borderStyle: TBorderStyle | TBorderStyle[];
    borderStartEndRadius: TBorderStartEndRadius;
    borderStartStartRadius: TBorderStartStartRadius;
    borderTop: TBorderTop;
    borderTopLeftRadius: TBorderTopLeftRadius;
    borderTopRightRadius: TBorderTopRightRadius;
    display: TDisplay;
    boxShadow: TBoxShadow;
    boxSizing: TBoxSizing;
    breakAfter: TBreakAfter;
    breakBefore: TBreakBefore;
    breakInside: TBreakInside;
    captionSide: TCaptionSide;
    caretColor: TCaretColor;
    clear: TClear;
    clip: TClip;
    clipPath: TClipPath;
    color: TColor;
    colorInterpolation: TColorInterpolation;
    colorInterpolationFilters: TColorInterpolationFilters;
    colorScheme: TColorScheme;
    columnCount: TColumnCount;
    columnFill: TColumnFill;
    columnGap: TColumnGap;
    columnRule: TColumnRule;
    columnSpan: TColumnSpan;
    columnWidth: TColumnWidth;
    contain: TContain;
    containIntrinsicBlockSize: TContainIntrinsicBlockSize;
    containIntrinsicHeight: TContainIntrinsicHeight;
    containIntrinsicInlineSize: TContainIntrinsicInlineSize;
    containIntrinsicSize: TContainIntrinsicSize;
    containIntrinsicWidth: TContainIntrinsicWidth;
    container: TContainer;
    content: TContent;
    contentVisibility: TContentVisibility;
    counterIncrement: TCounterIncrement;
    counterReset: TCounterReset;
    counterSet: TCounterSet;
    cursor: TCursor;
    cx: TCx;
    cy: TCy;
    d: TD;
    direction: TDirection;
    dominantBaseline: TDominantBaseline;
    emptyCells: TEmptyCells;
    flex: TFlex;
    flexBasis: TFlexBasis;
    flexDirection: TFlexDirection;
    flexGrow: TFlexGrow;
    flexShrink: TFlexShrink;
    flexWrap: TFlexWrap;
    fieldSizing: TFieldSizing;
    fill: TFill;
    fillOpacity: TFillOpacity;
    fillRule: TFillRule;
    filter: TFilter;
    float: TFloat;
    floodColor: TFloodColor;
    floodOpacity: TFloodOpacity;
    font: TFont;
    fontFeatureSettings: TFontFeatureSettings;
    fontKerning: TFontKerning;
    fontLanguageOverride: TFontLanguageOverride;
    fontOpticalSizing: TFontOpticalSizing;
    fontPalette: TFontPalette;
    margin: TMargin;
    padding: TPadding;
}>;
type TResponsive = {
    mobile?: TCSSPropValue;
    tablet?: TCSSPropValue;
    desktop?: TCSSPropValue;
    className?: string;
};
export type TStyle = {
    className?: string;
    env?: TEnv;
} & TResponsive;
export declare const propertyMap: Record<keyof TCSSPropValue, {
    className: Record<TEnv, string>;
    normalize: (value: any) => string | number;
}>;
export {};
